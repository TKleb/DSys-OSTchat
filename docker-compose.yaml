# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
# Userful links:
# Swam: https://docs.docker.com/compose/compose-file/deploy/

version: '3.9'

services:
  traefik:
    build:
      context: Traefik
    container_name: traefik
    hostname: traefik
    networks:
      - traefik_net
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    labels:
      - certificatesresolvers.letsencrypt.acme.email=${EMAIL}
      - certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - certificatesresolvers.letsencrypt.acme.httpchallenge=true
      # Debug purposes - comment out in production
      - certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - logs:/var/log/traefik
      #- ./Traefik/config/traefik.yaml:/etc/traefik/traefik.yaml

  oschat-web:
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    build:
      context: ./Website
      target: ${TARGET:-development}
    working_dir: /usr/app
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.rule=Host(`$MY_DOMAIN`)
      # Here we are defining wich entrypoint should be used by clients to access this service
      - traefik.http.routers.web.entrypoints=websecure
      # Here we define in wich network treafik can find this service
      - traefik.docker.network=traefik_net
      - traefik.http.services.web.loadBalancer.sticky.cookie=true
      # HTTPS:
      - traefik.http.routers.web.tls.certresolver=letsencrypt
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /usr/app/node_modules
    depends_on:
      - db
    networks:
      - traefik_net
      - ostchat-backend-db

  db:
    container_name: ostchat-database
    build:
      context: ./Database
      target: postgres-${TARGET:-development}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-ostchat}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    # TODO: Volume currently disabled to make it volatile. Uncomment to make it persistent.
    #volumes:
    #  - postgres-db:/var/lib/postgresql/data
    networks:
      - ostchat-backend-db
      - ostchat-db-pgadmin4
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 5s
      retries: 15

  pgadmin:
    container_name: ostchat-pgadmin
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-root}
      PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE:-False}
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.entrypoints=web
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.$MY_DOMAIN`)
      - traefik.docker.network=traefik_net
    volumes:
      - ostchat-pgadmin:/var/lib/pgadmin
    networks:
      - traefik_net
      - ostchat-db-pgadmin4
    depends_on:
      - db

networks:
  ostchat-backend-db:
    ipam:
      driver: default
  ostchat-db-pgadmin4:
    ipam:
      driver: default
  traefik_net:
    name: traefik_net
    ipam:
      driver: default

volumes:
  ostchat-pgadmin:
  letsencrypt:
  logs:
